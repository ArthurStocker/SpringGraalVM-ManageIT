package org.elixir.service;

import java.lang.ref.SoftReference;
import java.util.Deque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicInteger;

import org.poc.config.Framework;
import org.poc.core.Worker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

/**
 * 
 * 
 * 
 * 
 * 
 * 
 */
@Service
public class TaskManager {
  
  private final int _pid;
  private final String _id;
  private final String _name;

  private final Deque<Worker> _workers;
  private final ThreadLocal<Worker> _currentWorker;

  private final AsyncTaskCounter _asyncCounter = new AsyncTaskCounter();

  private final Map<String, String> _options = new HashMap<String, String>();

  private static AtomicInteger _increment = new AtomicInteger(1);

  private static final Logger logger = LoggerFactory.getLogger(TaskManager.class);

  public TaskManager(Map<String, String> args) {
    _options.putAll(args);
    _name = _options.get("name");
    _id = _options.get("ID");
    logger.info("Worker initialized");

    _pid = _increment.getAndIncrement();

    _workers = new LinkedBlockingDeque<Worker>();
    _currentWorker = new ThreadLocal<Worker>();

    logger.info("Started Worker [" + toString() + "]");
  }

  /**
   * .
   * 
   * @return
   */
  public String getID() {
    return _id;
  }

  /**
   * .
   * 
   * @return
   */
  public String getName() {
    return _name;
  }

  /**
   * Associate a worker with the current worker and return the worker
   * that was previously associated with it, or null.
   *
   * @param worker the new worker associated with the current thread
   * @return the worker previously associated with the current thread, or null
   */
  protected Worker setCurrentWorker(Worker worker) {
    Worker previousWorker = _currentWorker.get();
    _currentWorker.set(worker);
    return previousWorker;
  }

  /**
   * Get a new {@link Worker}.
   * 
   * @return a worker instance.
   */
  public Worker openWorker() {
    Worker worker = _workers.pollFirst();
    if (worker == null) {
      Map<String, Object> args = new HashMap<String, Object>();
      worker = new Worker(args);
    }

    return worker;
  }

  /**
   * Return a worker, returning it to the worker pool.
   * 
   * @param worker the worker to be released
   */
  public void closeWorker(Worker worker) {
    if (!_workers.offerFirst(worker)) {
      worker.close();
    }
  }

  /**
   * .
   * 
   * @param arguments
   * @return
   */
  public ResponseEntity<Object> dispatch(Object... arguments) {
    // TODO: dispatch to worker ....

    

    //openWorker().invoke(domain, arguments);
    return null;
  }

  /**
   * Wait until all daemon threads running in this engine have terminated.
   * @throws InterruptedException if the current thread has been interrupted
   */
  public void waitForAsyncTasks() throws InterruptedException {
    _asyncCounter.waitTillDone();
  }

  protected void enterAsyncTask() {
    _asyncCounter.increase();
  }

  protected void exitAsyncTask() {
    _asyncCounter.decrease();
  }



  /**
   * Returns a string representation of the broker.
   */
  public String toString() {
    return "broker-" + _pid + " (" + _name + ")";
  }



	/**
   * Count the AsyncTasks handled by this Dispatcher
   */
  static class AsyncTaskCounter {

    int count = 0;

    synchronized void waitTillDone() throws InterruptedException {
      while(count > 0) {
        wait();
      }
    }

    synchronized void increase() {
      ++count;
    }

    synchronized void decrease() {
      if (--count <= 0) {
        notifyAll();
      }
    }
  }
}